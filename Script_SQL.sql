-- ============================================
-- NOTA: Ejecutar sentencias SQL en orden como estan creadas
-- ============================================

-- ============================================
-- TABLA: USUARIOS
-- ============================================
CREATE TABLE USUARIOS (
    ID_USUARIO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    EMAIL_USER VARCHAR2(150) NOT NULL UNIQUE,
    CONTRASENA VARCHAR2(100) NOT NULL,
    ROL VARCHAR2(20) CHECK (ROL IN ('Administrador', 'Auxiliar_Registro')) NOT NULL
);


-- ============================================
-- TABLA: COMERCIANTES
-- ============================================
CREATE TABLE COMERCIANTES (
    ID_COMERCIANTE NUMBER PRIMARY KEY,
    RAZON_SOCIAL VARCHAR2(150) NOT NULL,
    MUNICIPIO VARCHAR2(100) NOT NULL,
    TELEFONO VARCHAR2(20),
    EMAIL_COMERCIANTE VARCHAR2(150),
    FECHA_REGISTRO DATE NOT NULL,
    ESTADO VARCHAR2(20) CHECK (ESTADO IN ('A', 'I')) NOT NULL,
    FECHA_ACTUALIZACION DATE,
    USUARIO_ACTUALIZACION NUMBER,
    FOREIGN KEY (USUARIO_ACTUALIZACION) REFERENCES USUARIOS(ID_USUARIO)
);


-- ============================================
-- TABLA: ESTABLECIMIENTOS
-- ============================================
CREATE TABLE ESTABLECIMIENTOS (
    ID_ESTABLECIMIENTO NUMBER PRIMARY KEY,
    NOMBRE_ESTABLECIMIENTO VARCHAR2(150) NOT NULL,
    INGRESOS NUMBER(15,2) NOT NULL,
    NUM_EMPLEADOS NUMBER NOT NULL,
    ID_COMERCIANTE NUMBER NOT NULL,
    FECHA_ACTUALIZACION DATE,
    USUARIO_ACTUALIZACION NUMBER,
    FOREIGN KEY (ID_COMERCIANTE) REFERENCES COMERCIANTES(ID_COMERCIANTE),
    FOREIGN KEY (USUARIO_ACTUALIZACION) REFERENCES USUARIOS(ID_USUARIO)
);

-- ============================================
-- TABLA INTERMEDIA: USUARIOS_ESTABLECIMIENTOS
-- ============================================
CREATE TABLE USUARIOS_ESTABLECIMIENTOS (
    ID_USUARIO NUMBER NOT NULL,
    ID_ESTABLECIMIENTO NUMBER NOT NULL,
    PRIMARY KEY (ID_USUARIO, ID_ESTABLECIMIENTO),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    FOREIGN KEY (ID_ESTABLECIMIENTO) REFERENCES ESTABLECIMIENTOS(ID_ESTABLECIMIENTO)
);

-- ============================================
-- ÍNDICES
-- ============================================
CREATE INDEX IDX_ESTABLECIMIENTOS_COMERCIANTE ON ESTABLECIMIENTOS(ID_COMERCIANTE);
CREATE INDEX IDX_COMERCIANTES_ESTADO ON COMERCIANTES(ESTADO);
CREATE INDEX IDX_USUARIOS_ESTAB_USUARIO ON USUARIOS_ESTABLECIMIENTOS(ID_USUARIO);
CREATE INDEX IDX_USUARIOS_ESTAB_ESTAB ON USUARIOS_ESTABLECIMIENTOS(ID_ESTABLECIMIENTO);

-- ============================================
-- SECUENCIAS
-- ============================================
CREATE SEQUENCE SEQ_USUARIOS START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_COMERCIANTES START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_ESTABLECIMIENTOS START WITH 1 INCREMENT BY 1 NOCACHE;

-- ============================================
-- TRIGGERS PRIMARY KEY
-- ============================================

-- Usuarios
CREATE OR REPLACE TRIGGER TRG_BI_USUARIOS
BEFORE INSERT ON USUARIOS
FOR EACH ROW
BEGIN
    :NEW.ID_USUARIO := SEQ_USUARIOS.NEXTVAL;
END;

-- Comerciantes
CREATE OR REPLACE TRIGGER TRG_BI_COMERCIANTES
BEFORE INSERT ON COMERCIANTES
FOR EACH ROW
BEGIN
    :NEW.ID_COMERCIANTE := SEQ_COMERCIANTES.NEXTVAL;
END;

-- Establecimientos
CREATE OR REPLACE TRIGGER TRG_BI_ESTABLECIMIENTOS
BEFORE INSERT ON ESTABLECIMIENTOS
FOR EACH ROW
BEGIN
    :NEW.ID_ESTABLECIMIENTO := SEQ_ESTABLECIMIENTOS.NEXTVAL;
END;

-- ============================================
-- TRIGGERS DE AUDITORÍA
-- ============================================

CREATE OR REPLACE TRIGGER TRG_AUD_COMERCIANTES
BEFORE INSERT OR UPDATE ON COMERCIANTES
FOR EACH ROW
BEGIN
    :NEW.FECHA_ACTUALIZACION := SYSDATE;

    -- Simulación de usuario en sesión: por ahora asignamos fijo el ID 1
    IF :NEW.USUARIO_ACTUALIZACION IS NULL THEN
        :NEW.USUARIO_ACTUALIZACION := 1;
    END IF;
END;

-- Auditoría Establecimientos
CREATE OR REPLACE TRIGGER TRG_AUD_ESTABLECIMIENTOS
BEFORE INSERT OR UPDATE ON ESTABLECIMIENTOS
FOR EACH ROW
BEGIN
    :NEW.FECHA_ACTUALIZACION := SYSDATE;

    IF :NEW.USUARIO_ACTUALIZACION IS NULL THEN
        :NEW.USUARIO_ACTUALIZACION := 1;
    END IF;
END;

-- ============================================
-- INSERCIÓN DATOS SEMILLA
-- ============================================

-- ============================================
-- USUARIOS
-- ============================================
INSERT INTO USUARIOS (NOMBRE, EMAIL_USER, CONTRASENA, ROL)
VALUES ('Juan Perez', 'admin@comercio.com', 'admin123', 'Administrador');

INSERT INTO USUARIOS (NOMBRE, EMAIL_USER, CONTRASENA, ROL)
VALUES ('Laura Gomez', 'auxiliar@comercio.com', 'aux123', 'Auxiliar_Registro');

-- ============================================
-- COMERCIANTES
-- ============================================
INSERT INTO COMERCIANTES (RAZON_SOCIAL, MUNICIPIO, TELEFONO, EMAIL_COMERCIANTE, FECHA_REGISTRO, ESTADO)
VALUES ('Distribuciones Andinas S.A.', 'Bogota', '3101234567', 'ventas@andinas.com', SYSDATE, 'A');

INSERT INTO COMERCIANTES (RAZON_SOCIAL, MUNICIPIO, TELEFONO, EMAIL_COMERCIANTE, FECHA_REGISTRO, ESTADO)
VALUES ('TecnoCom S.A.S.', 'Medellin', NULL, 'contacto@tecnocom.com', SYSDATE, 'A');

INSERT INTO COMERCIANTES (RAZON_SOCIAL, MUNICIPIO, TELEFONO, EMAIL_COMERCIANTE, FECHA_REGISTRO, ESTADO)
VALUES ('Alimentos del Norte', 'Barranquilla', '3124567890', NULL, SYSDATE, 'I');

INSERT INTO COMERCIANTES (RAZON_SOCIAL, MUNICIPIO, TELEFONO, EMAIL_COMERCIANTE, FECHA_REGISTRO, ESTADO)
VALUES ('Rapido Express', 'Cali', NULL, 'logistica@express.com', SYSDATE, 'A');

INSERT INTO COMERCIANTES (RAZON_SOCIAL, MUNICIPIO, TELEFONO, EMAIL_COMERCIANTE, FECHA_REGISTRO, ESTADO)
VALUES ('Soluciones del Caribe', 'Cartagena', NULL, NULL, SYSDATE, 'A');

-- ============================================
-- ESTABLECIMIENTOS 
-- Nota: Se asume que los ID de los comerciantes van del 1 al 5
-- ============================================

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Tienda Central', 45000.50, 5, 1);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Sucursal Norte', 23000.75, 3, 1);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('La Trampita', 15000.00, 8, 4);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Comidas la 12', 32000.00, 4, 2);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Electro Hogar', 50000.00, 6, 2);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Exito', 17500.00, 2, 5);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Ferro Estacion', 41000.25, 5, 4);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Mercado la 14', 58000.75, 7, 1);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('La placita', 12000.00, 3, 3);

INSERT INTO ESTABLECIMIENTOS (NOMBRE_ESTABLECIMIENTO, INGRESOS, NUM_EMPLEADOS, ID_COMERCIANTE)
VALUES ('Postobon', 26000.00, 2, 5);

-- ============================================
-- RELACIO USUARIOS - ESTABLECIMIENTOS
-- ID_USUARIO: 1 = Juan Perez (Administrador), 2 = Laura Gomez (Auxiliar)
-- ============================================

-- Juan Perez tiene acceso a 1, 2, 3, 5, 7, 9, 10 establecimientos
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 1);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 2);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 3);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 5);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 7);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 9);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (1, 10);

-- Laura Gomez tiene acceso a 1, 2, 4, 6, 8, 10 establecimientos
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 1);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 2);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 4);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 6);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 8);
INSERT INTO USUARIOS_ESTABLECIMIENTOS (ID_USUARIO, ID_ESTABLECIMIENTO) VALUES (2, 10);
COMMIT;


-- ============================================
-- Paquete reto 4  - HEADER
-- ============================================

CREATE OR REPLACE PACKAGE PKG_COMERCIANTES AS
    TYPE T_CURSOR IS REF CURSOR;
    
    FUNCTION GET_COMERCIANTES_ACTIVOS RETURN T_CURSOR;
END;

-- ============================================
-- Paquete reto 4  - BODY
-- ============================================

CREATE OR REPLACE PACKAGE BODY PKG_COMERCIANTES AS

    FUNCTION GET_COMERCIANTES_ACTIVOS RETURN T_CURSOR IS
        C_RESULT T_CURSOR;
    BEGIN
        OPEN C_RESULT FOR
        SELECT
            C.RAZON_SOCIAL,
            C.MUNICIPIO,
            C.TELEFONO,
            C.EMAIL_COMERCIANTE,
            C.FECHA_REGISTRO,
            C.ESTADO,
            COUNT(E.ID_ESTABLECIMIENTO) AS CANT_ESTABLECIMIENTOS,
            NVL(SUM(E.INGRESOS), 0) AS TOTAL_INGRESOS,
            NVL(SUM(E.NUM_EMPLEADOS), 0) AS CANTIDAD_EMPLEADOS
        FROM COMERCIANTES C
        LEFT JOIN ESTABLECIMIENTOS E ON E.ID_COMERCIANTE = C.ID_COMERCIANTE
        WHERE C.ESTADO = 'A'
        GROUP BY C.ID_COMERCIANTE, C.RAZON_SOCIAL, C.MUNICIPIO, C.TELEFONO,
                 C.EMAIL_COMERCIANTE, C.FECHA_REGISTRO, C.ESTADO
        ORDER BY COUNT(E.ID_ESTABLECIMIENTO) DESC;

        RETURN C_RESULT;
    END;

END;

-- ============================================
-- Probar el paquete
-- ============================================

DECLARE
    v_cursor PKG_COMERCIANTES.T_CURSOR;
    v_nombre_razon COMERCIANTES.RAZON_SOCIAL%TYPE;
    v_municipio COMERCIANTES.MUNICIPIO%TYPE;
    v_telefono COMERCIANTES.TELEFONO%TYPE;
    v_correo COMERCIANTES.EMAIL_COMERCIANTE%TYPE;
    v_fecha_registro COMERCIANTES.FECHA_REGISTRO%TYPE;
    v_estado COMERCIANTES.ESTADO%TYPE;
    v_cant_estab NUMBER;
    v_total_ingresos NUMBER;
    v_cant_empleados NUMBER;
BEGIN
    v_cursor := PKG_COMERCIANTES.GET_COMERCIANTES_ACTIVOS;

    LOOP
        FETCH v_cursor INTO v_nombre_razon, v_municipio, v_telefono, v_correo,
                            v_fecha_registro, v_estado, v_cant_estab,
                            v_total_ingresos, v_cant_empleados;

        EXIT WHEN v_cursor%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('  Comerciante: ' || v_nombre_razon);
        DBMS_OUTPUT.PUT_LINE('  Municipio: ' || v_municipio);
        DBMS_OUTPUT.PUT_LINE('  Teléfono: ' || NVL(v_telefono, 'N/A'));
        DBMS_OUTPUT.PUT_LINE('  Correo: ' || NVL(v_correo, 'N/A'));
        DBMS_OUTPUT.PUT_LINE('  Fecha Registro: ' || TO_CHAR(v_fecha_registro, 'YYYY-MM-DD'));
        DBMS_OUTPUT.PUT_LINE('  Estado: ' || v_estado);
        DBMS_OUTPUT.PUT_LINE('  Establecimientos: ' || v_cant_estab);
        DBMS_OUTPUT.PUT_LINE('  Total Ingresos: ' || v_total_ingresos);
        DBMS_OUTPUT.PUT_LINE('  Empleados: ' || v_cant_empleados);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
    END LOOP;

    CLOSE v_cursor;
END;
